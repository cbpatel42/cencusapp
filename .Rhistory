getwd()
# Simulating fake data
x_1 <- rnorm(1000,5,7) # from a normal distribution simulate
# 1000 values with a mean of 5 and
# standard deviation of 7
hist(x_1, col="grey") # plot p(x)
true_error <- rnorm(1000,0,2)
true_beta_0 <- 1.1
true_beta_1 <- -8.2
y <- true_beta_0 + true_beta_1*x_1 + true_error
hist(y) # plot p(y)
plot(x_1,y, pch=20,col="red") # plot p(x,y)
model<- lm(y~x_1)
summary(model)
head(model)
model
summary(model)
coef(model)
summary(model)
coef(model)
y
x_2 = rgamma(200,5)
y<- 24x_1 + 7x_2 +7
y<- 24*x_1 + 7*x_2 +7
model2<-(y~x_1)
plot(x_1, y, pch=30, col="red")
plot(x_1, y, pch=20, col="red")
coef(model2)
coef(model)
coef(model2)
plot(x_1,y, pch=20,col="red") # plot p(x,y)
> model3 <- (y~x_2)
model3 <- (y~x_2)
plot(x_1,y, pch=20,col="red") # plot p(x,y)
model4<- (y~x_1+x_2)
> plot(x_1+x_2, y, pch=20, col="red")
plot(x_2, y, pch=20, col="red")
plot(x_2, y, pch=20, col="red")
plot(y,x_2 pch=20, col="red")
plot(y,x_2, pch=20, col="red")
plot(x_1+x_2, y, pch=20, col="red")
> plot(x_1, y, pch=20, col="red")
plot(x_1, y, pch=20, col="red")
plot(x_2, y, pch=20, col="red")
plot(x_2, y, pch=30, col="red")
plot(x_1, x_2, y, pch=30, col="red")
plot(x_1, y, pch=30, col="red")
plot(x_1, y, pch=20, col="red")
plot(x_2, y, pch=20, col="red")
plot(x_2, y, pch=20, col="red")
coefs1 <- coef(model4)
abline(coefs1[1], coefs1[2])
plot(x_2, y, pch=20, col="red")
model2
coef(model3)
coef(model2)
coef(model)
model2<-lm(y~x_1)
model3<-lm(y~x_2)
getwd()
library(readr)
install.packages("readr")
install.packages("readr")
library(readr)
library(readr)
library(readr)
parse_number("$1,234.56")
parse_number("$1.234,56",
locale = locale(decimal_mark = ",", grouping_mark = ".")
)
parse_number("$1.234,56",
locale = locale(decimal_mark = ",", grouping_mark = ",")
)
parse_number("$1.234,56",
locale = locale(decimal_mark = ".", grouping_mark = ".")
)
time_format
> parse_time("04 39 pm", "%I %M %p", locale = locale(time_format = "%AT"))
parse_time("04 39 pm", "%I %M %p", locale = locale(time_format = "%AT"))
parse_time("10 10 pm", "%I %M %p", locale = locale(time_format = "%AT"))
parse_time("09 22 pm", "%I %M %p", locale = locale(time_format = "%AT"))
parse_date("07 July 1996", "%d %B %Y", locale = locale(date_format = "% AD"))
parse_date("03 February 2017", "%d %B %Y", locale = locale(date_format = "% AD"))
library(rJava)
install.packages("rJava")
library(rJava)
install.packages("NLP", "openNLP", "RWeka", "qdap"))
install.packages("NLP", "openNLP", "RWeka", "qdap")
install.packages("openNLPmodels.en", repos="http://datacube.wu.ac.at/",type="source")
library(openNLPmodels.en)
library(openNLP)
install.package(openNLP)
install.packages(openNLP)
install.packages(NLP)
install.packages(c("NLP","openNLP","RWeka","qdap"))
install.packages("openNLPmodels.en",repos="http://datacube.wu.ac.at/",type="source")
install.packages("openNLPmodels.en", repos = "http://datacube.wu.ac.at/", type = "source")
library(NLP)
library(openNLP)
library(RWeka)
install.packages(RWeka)
library(magrittr)
library(RWeka)
library(rJava)
getwd()
bio <- readLines("data/nlp/anb-jarena-lee.txt")
setwd
getwd
getwd()
bio <- readLines("data/nlp/anb-jarena-lee.txt")
library(RWeka)
setwd(Desktop)
changewd()
getwd()
bio <- readLines("data/nlp/anb-jarena-lee.txt")
bio <- readLines("jarena-lee.txt")
bio <- readLines("data/nlp/anb-jarena-lee.txt")
bio <- readLines("data/nlp/anb-jarena-lee.txt")
setInternet2(TRUE)
bio <- readLines("jarena_lee.txt")
row(bio)
length(bio)
print(bio)
bio <- paste(bio, collapse = " ")
bio <- as.String(bio)
library(rJAva)
library(rJava)
bio <- as.String(bio)
library(lgtdl)
library("lgtdl"")
library(NLP)
library(openNLP)
library(magrittr)
bio <- as.String(bio)
word_ann <- Maxent_Word_Token_Annotator()
sent_ann <- Maxent_Sent_Token_Annotator()
bio_annotations <- annotate(bio, list(sent_ann, word_ann))
head(bio_annotations)
bio_doc <- AnnotatedPlainTextDocument(bio, bio_annotations)
person_ann <- Maxent_Entity_Annotator(kind = "person")
location_ann <- Maxent_Entity_Annotator(kind = "location")
organization_ann <- Maxent_Entity_Annotator(kind = "organization")
person_ann
pipeline <- list(sent_ann,
word_ann,
person_ann,
location_ann,
organization_ann)
bio_annotations <- annotate(bio, pipeline)
bio_doc <- AnnotatedPlainTextDocument(bio, bio_annotations)
entities <- function(doc, kind) {
s <- doc$content
a <- annotations(doc)[[1]]
if(hasArg(kind)) {
k <- sapply(a$features, `[[`, "kind")
s[a[k == kind]]
} else {
s[a[a$type == "entity"]]
}
}
entities(bio_doc, kind = "person")
entities(bio_doc, kind = "location")
entities(bio_doc, kind = "organization")
source("helpers.R")
counties <- readRDS("data/counties.rds")
source("helpers.R")
library(shiny)
runApp("census-app")
runApp("App-1")
setwd("C:/Users/info/Desktop")
setwd("C:/Users/info/Desktop")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("census-app")
